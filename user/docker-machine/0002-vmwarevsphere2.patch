From: Jakub Jirutka <jakub@jirutka.cz>
Date: Sun, 26 Feb 2023 00:20:07 +0100
Subject: [PATCH] Add modified vmwarevsphere driver

Add a modified vmwarevsphere driver that allows creating new VMs from
a template VM and injects SSH key via guestinfo variable `guestinfo.ssh-keys`.

--- a/cmd/docker-machine/machine.go
+++ b/cmd/docker-machine/machine.go
@@ -25,6 +25,7 @@
 	"github.com/docker/machine/drivers/vmwarefusion"
 	"github.com/docker/machine/drivers/vmwarevcloudair"
 	"github.com/docker/machine/drivers/vmwarevsphere"
+	"github.com/docker/machine/drivers/vmwarevsphere2"
 	"github.com/docker/machine/libmachine/drivers/plugin"
 	"github.com/docker/machine/libmachine/drivers/plugin/localbinary"
 	"github.com/docker/machine/libmachine/log"
@@ -197,6 +198,8 @@
 		plugin.RegisterDriver(vmwarevcloudair.NewDriver("", ""))
 	case "vmwarevsphere":
 		plugin.RegisterDriver(vmwarevsphere.NewDriver("", ""))
+	case "vmwarevsphere2":
+		plugin.RegisterDriver(vmwarevsphere2.NewDriver("", ""))
 	default:
 		fmt.Fprintf(os.Stderr, "Unsupported driver: %s\n", driverName)
 		os.Exit(1)
--- a/libmachine/drivers/plugin/localbinary/plugin.go
+++ b/libmachine/drivers/plugin/localbinary/plugin.go
@@ -20,7 +20,7 @@
 	CoreDrivers                  = []string{"amazonec2", "azure", "digitalocean",
 		"exoscale", "generic", "google", "hyperv", "none", "openstack",
 		"rackspace", "softlayer", "virtualbox", "vmwarefusion",
-		"vmwarevcloudair", "vmwarevsphere"}
+		"vmwarevcloudair", "vmwarevsphere", "vmwarevsphere2"}
 )
 
 const (
--- /dev/null
+++ b/drivers/vmwarevsphere2/vsphere_test.go
@@ -0,0 +1,22 @@
+package vmwarevsphere2
+
+import (
+	"testing"
+
+	"github.com/docker/machine/libmachine/drivers"
+	"github.com/stretchr/testify/assert"
+)
+
+func TestSetConfigFromFlags(t *testing.T) {
+	driver := NewDriver("default", "path")
+
+	checkFlags := &drivers.CheckDriverOptions{
+		FlagsValues: map[string]interface{}{},
+		CreateFlags: driver.GetCreateFlags(),
+	}
+
+	err := driver.SetConfigFromFlags(checkFlags)
+
+	assert.NoError(t, err)
+	assert.Empty(t, checkFlags.InvalidFlags)
+}
--- /dev/null
+++ b/drivers/vmwarevsphere2/vsphere.go
@@ -0,0 +1,812 @@
+/*
+ * Copyright 2014 VMware, Inc.  All rights reserved.  Licensed under the Apache v2 License.
+ */
+
+package vmwarevsphere2
+
+import (
+	"encoding/base64"
+	"fmt"
+	"io/ioutil"
+	"net"
+	"net/url"
+	"os"
+	"strings"
+	"time"
+
+	"github.com/docker/machine/libmachine/drivers"
+	"github.com/docker/machine/libmachine/log"
+	"github.com/docker/machine/libmachine/mcnflag"
+	"github.com/docker/machine/libmachine/ssh"
+	"github.com/docker/machine/libmachine/state"
+
+	"errors"
+
+	"github.com/vmware/govmomi"
+	"github.com/vmware/govmomi/find"
+	"github.com/vmware/govmomi/object"
+	"github.com/vmware/govmomi/vim25/mo"
+	"github.com/vmware/govmomi/vim25/types"
+	"golang.org/x/net/context"
+)
+
+const (
+	// dockerBridgeIP is the default IP address of the docker0 bridge.
+	dockerBridgeIP = "172.17.0.1"
+)
+
+type Driver struct {
+	*drivers.BaseDriver
+	Memory         int
+	DiskSize       int
+	CPU            int
+	Template       string
+	CPUS           int
+
+	IP         string
+	Port       int
+	Username   string
+	Password   string
+	Datastore  string
+	Datacenter string
+	Folder     string
+	Pool       string
+	HostSystem string
+	CfgParams  []string
+	CloudInit  string
+}
+
+const (
+	defaultSSHUser  = "docker"
+	defaultSDKPort  = 443
+)
+
+// GetCreateFlags registers the flags this driver adds to
+// "docker-machine create"
+func (d *Driver) GetCreateFlags() []mcnflag.Flag {
+	return []mcnflag.Flag{
+		mcnflag.IntFlag{
+			EnvVar: "VSPHERE_CPU_COUNT",
+			Name:   "vmwarevsphere-cpu-count",
+			Usage:  "vSphere CPU number for docker VM",
+			Value:  -1,
+		},
+		mcnflag.IntFlag{
+			EnvVar: "VSPHERE_MEMORY_SIZE",
+			Name:   "vmwarevsphere-memory-size",
+			Usage:  "vSphere size of memory for docker VM (in MB)",
+			Value:  -1,
+		},
+		mcnflag.IntFlag{
+			EnvVar: "VSPHERE_DISK_SIZE",
+			Name:   "vmwarevsphere-disk-size",
+			Usage:  "vSphere size of vmdisk1 for docker VM (in MB)",
+			Value:  -1,
+		},
+		mcnflag.StringFlag{
+			EnvVar: "VSPHERE_TEMPLATE",
+			Name:   "vmwarevsphere-template",
+			Usage:  "vSphere location of the VM template",
+		},
+		mcnflag.StringFlag{
+			EnvVar: "VSPHERE_VCENTER",
+			Name:   "vmwarevsphere-vcenter",
+			Usage:  "vSphere IP/hostname for vCenter",
+		},
+		mcnflag.IntFlag{
+			EnvVar: "VSPHERE_VCENTER_PORT",
+			Name:   "vmwarevsphere-vcenter-port",
+			Usage:  "vSphere Port for vCenter",
+			Value:  defaultSDKPort,
+		},
+		mcnflag.StringFlag{
+			EnvVar: "VSPHERE_USERNAME",
+			Name:   "vmwarevsphere-username",
+			Usage:  "vSphere username",
+		},
+		mcnflag.StringFlag{
+			EnvVar: "VSPHERE_PASSWORD",
+			Name:   "vmwarevsphere-password",
+			Usage:  "vSphere password",
+		},
+		mcnflag.StringFlag{
+			EnvVar: "VSPHERE_DATASTORE",
+			Name:   "vmwarevsphere-datastore",
+			Usage:  "vSphere datastore for docker VM",
+		},
+		mcnflag.StringFlag{
+			EnvVar: "VSPHERE_DATACENTER",
+			Name:   "vmwarevsphere-datacenter",
+			Usage:  "vSphere datacenter for docker VM",
+		},
+		mcnflag.StringFlag{
+			EnvVar: "VSPHERE_FOLDER",
+			Name:   "vmwarevsphere-folder",
+			Usage:  "vSphere folder for the docker VM. This folder must already exist in the datacenter.",
+		},
+		mcnflag.StringFlag{
+			EnvVar: "VSPHERE_POOL",
+			Name:   "vmwarevsphere-pool",
+			Usage:  "vSphere resource pool for docker VM",
+		},
+		mcnflag.StringFlag{
+			EnvVar: "VSPHERE_HOSTSYSTEM",
+			Name:   "vmwarevsphere-hostsystem",
+			Usage:  "vSphere compute resource where the docker VM will be instantiated. This can be omitted if using a cluster with DRS.",
+		},
+		mcnflag.StringSliceFlag{
+			EnvVar: "VSPHERE_CFGPARAM",
+			Name:   "vmwarevsphere-cfgparam",
+			Usage:  "vSphere vm configuration parameters (used for guestinfo)",
+		},
+		mcnflag.StringFlag{
+			EnvVar: "VSPHERE_CLOUDINIT",
+			Name:   "vmwarevsphere-cloudinit",
+			Usage:  "vSphere cloud-init file or url to set in the guestinfo",
+		},
+	}
+}
+
+func NewDriver(hostName, storePath string) drivers.Driver {
+	return &Driver{
+		Port:        defaultSDKPort,
+		BaseDriver: &drivers.BaseDriver{
+			SSHUser:     defaultSSHUser,
+			MachineName: hostName,
+			StorePath:   storePath,
+		},
+	}
+}
+
+func (d *Driver) GetSSHHostname() (string, error) {
+	return d.GetIP()
+}
+
+func (d *Driver) GetSSHUsername() string {
+	if d.SSHUser == "" {
+		d.SSHUser = "docker"
+	}
+
+	return d.SSHUser
+}
+
+// DriverName returns the name of the driver
+func (d *Driver) DriverName() string {
+	return "vmwarevsphere2"
+}
+
+func (d *Driver) SetConfigFromFlags(flags drivers.DriverOptions) error {
+	d.SSHUser = "docker"
+	d.SSHPort = 22
+	d.CPU = flags.Int("vmwarevsphere-cpu-count")
+	d.Memory = flags.Int("vmwarevsphere-memory-size")
+	d.DiskSize = flags.Int("vmwarevsphere-disk-size")
+	d.Template = flags.String("vmwarevsphere-template")
+	d.IP = flags.String("vmwarevsphere-vcenter")
+	d.Port = flags.Int("vmwarevsphere-vcenter-port")
+	d.Username = flags.String("vmwarevsphere-username")
+	d.Password = flags.String("vmwarevsphere-password")
+	d.Datastore = flags.String("vmwarevsphere-datastore")
+	d.Datacenter = flags.String("vmwarevsphere-datacenter")
+	// Sanitize input on ingress.
+	d.Folder = strings.Trim(flags.String("vmwarevsphere-folder"), "/")
+	d.Pool = flags.String("vmwarevsphere-pool")
+	d.HostSystem = flags.String("vmwarevsphere-hostsystem")
+	d.CfgParams = flags.StringSlice("vmwarevsphere-cfgparam")
+	d.CloudInit = flags.String("vmwarevsphere-cloudinit")
+	d.SetSwarmConfigFromFlags(flags)
+
+	return nil
+}
+
+func (d *Driver) GetURL() (string, error) {
+
+	ip, err := d.GetIP()
+	if err != nil {
+		return "", err
+	}
+	if ip == "" {
+		return "", nil
+	}
+	return fmt.Sprintf("tcp://%s", net.JoinHostPort(ip, "2376")), nil
+}
+
+func (d *Driver) GetIP() (string, error) {
+	status, err := d.GetState()
+	if status != state.Running {
+		return "", drivers.ErrHostIsNotRunning
+	}
+
+	// Create context
+	ctx, cancel := context.WithCancel(context.Background())
+	defer cancel()
+
+	c, err := d.vsphereLogin(ctx)
+	if err != nil {
+		return "", err
+	}
+	defer c.Logout(ctx)
+
+	vm, err := d.fetchVM(ctx, c, d.Folder, d.MachineName)
+	if err != nil {
+		return "", err
+	}
+
+	configuredMacIPs, err := vm.WaitForNetIP(ctx, false)
+	if err != nil {
+		return "", err
+	}
+
+	for _, ips := range configuredMacIPs {
+		if len(ips) >= 0 {
+			// Prefer IPv4 address, but fall back to first/IPv6
+			preferredIP := ips[0]
+			for _, ip := range ips {
+				// In addition to non IPv4 addresses, try to filter
+				// out link local addresses and the default address of
+				// the Docker0 bridge
+				netIP := net.ParseIP(ip)
+				if netIP.To4() != nil && netIP.IsGlobalUnicast() && !netIP.Equal(net.ParseIP(dockerBridgeIP)) {
+					preferredIP = ip
+					break
+				}
+			}
+			return preferredIP, nil
+		}
+	}
+
+	return "", errors.New("No IP despite waiting for one - check DHCP status")
+}
+
+func (d *Driver) GetState() (state.State, error) {
+
+	// Create context
+	ctx, cancel := context.WithCancel(context.Background())
+	defer cancel()
+
+	c, err := d.vsphereLogin(ctx)
+	if err != nil {
+		return state.None, err
+	}
+	defer c.Logout(ctx)
+
+	vm, err := d.fetchVM(ctx, c, d.Folder, d.MachineName)
+	if err != nil {
+		return state.None, err
+	}
+
+	var mvm mo.VirtualMachine
+
+	err = c.RetrieveOne(ctx, vm.Reference(), nil, &mvm)
+	if err != nil {
+		return state.None, nil
+	}
+
+	s := mvm.Summary
+
+	if strings.Contains(string(s.Runtime.PowerState), "poweredOn") {
+		return state.Running, nil
+	} else if strings.Contains(string(s.Runtime.PowerState), "poweredOff") {
+		return state.Stopped, nil
+	}
+	return state.None, nil
+}
+
+// PreCreateCheck checks that the machine creation process can be started safely.
+func (d *Driver) PreCreateCheck() error {
+	log.Debug("Connecting to vSphere for pre-create checks...")
+	// Create context
+	ctx, cancel := context.WithCancel(context.Background())
+	defer cancel()
+
+	c, err := d.vsphereLogin(ctx)
+	if err != nil {
+		return err
+	}
+	defer c.Logout(ctx)
+
+	// Create a new finder
+	f := find.NewFinder(c.Client, true)
+
+	dc, err := f.DatacenterOrDefault(ctx, d.Datacenter)
+	if err != nil {
+		return err
+	}
+
+	f.SetDatacenter(dc)
+
+	// Folder
+	if d.Folder != "" {
+		// Find the specified Folder to create the VM in.
+		folders, err := dc.Folders(ctx)
+		if err != nil {
+			return err
+		}
+		folder, err := f.Folder(ctx, fmt.Sprintf("%s/%s", folders.VmFolder.InventoryPath, d.Folder))
+		// It's an error to not find the folder, or for the search itself to fail.
+		if err != nil {
+			// The search itself failed.
+			return err
+		}
+		if folder == nil {
+			return fmt.Errorf("failed to find VM Folder '%s'", d.Folder)
+		}
+	}
+
+	if _, err := f.DatastoreOrDefault(ctx, d.Datastore); err != nil {
+		return err
+	}
+
+	var hs *object.HostSystem
+	if d.HostSystem != "" {
+		var err error
+		hs, err = f.HostSystemOrDefault(ctx, d.HostSystem)
+		if err != nil {
+			return err
+		}
+	}
+
+	// ResourcePool
+	if d.Pool != "" {
+		// Find specified Resource Pool
+		if _, err := f.ResourcePool(ctx, d.Pool); err != nil {
+			return err
+		}
+	} else if hs != nil {
+		// Pick default Resource Pool for Host System
+		if _, err := hs.ResourcePool(ctx); err != nil {
+			return err
+		}
+	} else {
+		// Pick the default Resource Pool for the Datacenter.
+		if _, err := f.DefaultResourcePool(ctx); err != nil {
+			return err
+		}
+	}
+
+	// Template VM
+	if _, err := d.fetchVM(ctx, c, "", d.Template); err != nil {
+		return err
+	}
+
+	return nil
+}
+
+func (d *Driver) Create() error {
+	log.Infof("Generating SSH Keypair...")
+	if err := ssh.GenerateSSHKey(d.GetSSHKeyPath()); err != nil {
+		return err
+	}
+
+	pubKey, err := ioutil.ReadFile(d.publicSSHKeyPath())
+	if err != nil {
+		return err
+	}
+
+	// Create context
+	ctx, cancel := context.WithCancel(context.Background())
+	defer cancel()
+
+	c, err := d.vsphereLogin(ctx)
+	if err != nil {
+		return err
+	}
+	defer c.Logout(ctx)
+
+	// Create a new finder
+	f := find.NewFinder(c.Client, true)
+
+	dc, err := f.DatacenterOrDefault(ctx, d.Datacenter)
+	if err != nil {
+		return err
+	}
+
+	f.SetDatacenter(dc)
+
+	dss, err := f.DatastoreOrDefault(ctx, d.Datastore)
+	if err != nil {
+		return err
+	}
+
+	var hs *object.HostSystem
+	if d.HostSystem != "" {
+		var err error
+		hs, err = f.HostSystemOrDefault(ctx, d.HostSystem)
+		if err != nil {
+			return err
+		}
+	}
+
+	var rp *object.ResourcePool
+	if d.Pool != "" {
+		// Find specified Resource Pool
+		rp, err = f.ResourcePool(ctx, d.Pool)
+		if err != nil {
+			return err
+		}
+	} else if d.HostSystem != "" {
+		// Pick default Resource Pool for Host System
+		rp, err = hs.ResourcePool(ctx)
+		if err != nil {
+			return err
+		}
+	} else {
+		// Pick the default Resource Pool for the Datacenter.
+		rp, err = f.DefaultResourcePool(ctx)
+		if err != nil {
+			return err
+		}
+	}
+
+	configSpec := types.VirtualMachineConfigSpec{}
+	if d.CPU > 0 {
+		configSpec.NumCPUs = int32(d.CPU)
+	}
+	if d.Memory > 0 {
+		configSpec.MemoryMB = int64(d.Memory)
+	}
+
+	relocSpec := types.VirtualMachineRelocateSpec{}
+	if hs != nil {
+		hsRef := hs.Reference()
+		relocSpec.Host = &hsRef
+	}
+	if rp != nil {
+		rpRef := rp.Reference()
+		relocSpec.Pool = &rpRef
+	}
+	dssRef := dss.Reference()
+	relocSpec.Datastore = &dssRef
+
+	cloneSpec := types.VirtualMachineCloneSpec{
+		Config: &configSpec,
+		Location: relocSpec,
+		Template: false,
+	}
+
+	template, err := d.fetchVM(ctx, c, "", d.Template)
+	if err != nil {
+		return err
+	}
+
+	log.Infof("Creating VM...")
+	folders, err := dc.Folders(ctx)
+	folder := folders.VmFolder
+	if d.Folder != "" {
+		folder, err = f.Folder(ctx, fmt.Sprintf("%s/%s", folders.VmFolder.InventoryPath, d.Folder))
+		if err != nil {
+			return err
+		}
+	}
+	task, err := template.Clone(ctx, folder, d.MachineName, cloneSpec)
+	if err != nil {
+		return err
+	}
+
+	info, err := task.WaitForResult(ctx, nil)
+	if err != nil {
+		return err
+	}
+
+	// Retrieve the new VM
+	vm := object.NewVirtualMachine(c.Client, info.Result.(types.ManagedObjectReference))
+
+	log.Infof("Reconfiguring VM")
+
+	devices, err := vm.Device(ctx)
+	if err != nil {
+		return err
+	}
+
+	// NOTE: This hasn't been fully tested.
+	if d.DiskSize > 0 {
+		disks := devices.SelectByType((*types.VirtualDisk)(nil))
+		if len(disks) == 0 {
+			return errors.New("no disk device found")
+		}
+		disk := disks[0].(*types.VirtualDisk)
+
+		newCapacity := int64(d.DiskSize) * 1024 * 1024
+
+		if disk.CapacityInBytes > newCapacity {
+			return errors.New(
+				fmt.Sprintf("vmwarevsphere-disk-size=%d is less than the current disk capacity %d",
+					d.DiskSize,
+					disk.CapacityInBytes / 1024 / 1024,
+				),
+			)
+		}
+		disk.CapacityInBytes = newCapacity
+
+		if err := vm.EditDevice(ctx, disk); err != nil {
+			return err
+		}
+	}
+
+	// Adding some guestinfo data
+	var opts []types.BaseOptionValue
+
+	log.Debugf("Setting guestinfo.hostname to %s\n", d.MachineName)
+	opts = append(opts, &types.OptionValue{
+		Key:   "guestinfo.hostname",
+		Value: d.MachineName,
+	})
+	log.Debugf("Setting guestinfo.ssh-keys to %s\n", pubKey)
+	opts = append(opts, &types.OptionValue{
+		Key:   "guestinfo.ssh-keys",
+		Value: strings.TrimSuffix(string(pubKey), "\n"),
+	})
+	for _, param := range d.CfgParams {
+		v := strings.SplitN(param, "=", 2)
+		key := v[0]
+		value := ""
+		if len(v) > 1 {
+			value = v[1]
+		}
+		fmt.Printf("Setting %s to %s\n", key, value)
+		opts = append(opts, &types.OptionValue{
+			Key:   key,
+			Value: value,
+		})
+	}
+	if d.CloudInit != "" {
+		if _, err := url.ParseRequestURI(d.CloudInit); err == nil {
+			log.Infof("setting guestinfo.cloud-init.data.url to %s\n", d.CloudInit)
+			opts = append(opts, &types.OptionValue{
+				Key:   "guestinfo.cloud-init.config.url",
+				Value: d.CloudInit,
+			})
+		} else {
+			if _, err := os.Stat(d.CloudInit); err == nil {
+				if value, err := ioutil.ReadFile(d.CloudInit); err == nil {
+					log.Infof("setting guestinfo.cloud-init.data to encoded content of %s\n", d.CloudInit)
+					encoded := base64.StdEncoding.EncodeToString(value)
+					opts = append(opts, &types.OptionValue{
+						Key:   "guestinfo.cloud-init.config.data",
+						Value: encoded,
+					})
+					opts = append(opts, &types.OptionValue{
+						Key:   "guestinfo.cloud-init.data.encoding",
+						Value: "base64",
+					})
+				}
+			}
+		}
+	}
+
+	task, err = vm.Reconfigure(ctx, types.VirtualMachineConfigSpec{
+		ExtraConfig: opts,
+	})
+	if err != nil {
+		return err
+	}
+	if err := task.Wait(ctx); err != nil {
+		return err
+	}
+
+	if err := d.Start(); err != nil {
+		return err
+	}
+
+	return nil
+}
+
+func (d *Driver) Start() error {
+	machineState, err := d.GetState()
+	if err != nil {
+		return err
+	}
+
+	switch machineState {
+	case state.Running:
+		log.Infof("VM %s has already been started", d.MachineName)
+		return nil
+	case state.Stopped:
+		// TODO add transactional or error handling in the following steps
+		// Create context
+		ctx, cancel := context.WithCancel(context.Background())
+		defer cancel()
+
+		c, err := d.vsphereLogin(ctx)
+		if err != nil {
+			return err
+		}
+		defer c.Logout(ctx)
+
+		vm, err := d.fetchVM(ctx, c, d.Folder, d.MachineName)
+		if err != nil {
+			return err
+		}
+
+		task, err := vm.PowerOn(ctx)
+		if err != nil {
+			return err
+		}
+
+		_, err = task.WaitForResult(ctx, nil)
+		if err != nil {
+			return err
+		}
+
+		log.Infof("Waiting for VMware Tools to come online...")
+		if d.IPAddress, err = d.GetIP(); err != nil {
+			return err
+		}
+	}
+	return nil
+}
+
+func (d *Driver) Stop() error {
+	ctx, cancel := context.WithCancel(context.Background())
+	defer cancel()
+
+	c, err := d.vsphereLogin(ctx)
+	if err != nil {
+		return err
+	}
+	defer c.Logout(ctx)
+
+	vm, err := d.fetchVM(ctx, c, d.Folder, d.MachineName)
+	if err != nil {
+		return err
+	}
+
+	if err := vm.ShutdownGuest(ctx); err != nil {
+		return err
+	}
+
+	d.IPAddress = ""
+
+	return nil
+}
+
+func (d *Driver) Restart() error {
+	if err := d.Stop(); err != nil {
+		return err
+	}
+
+	// Check for 120 seconds for the machine to stop
+	for i := 1; i <= 60; i++ {
+		machineState, err := d.GetState()
+		if err != nil {
+			return err
+		}
+		if machineState == state.Running {
+			log.Debugf("Not there yet %d/%d", i, 60)
+			time.Sleep(2 * time.Second)
+			continue
+		}
+		if machineState == state.Stopped {
+			break
+		}
+	}
+
+	machineState, err := d.GetState()
+	// If the VM is still running after 120 seconds just kill it.
+	if machineState == state.Running {
+		if err = d.Kill(); err != nil {
+			return fmt.Errorf("can't stop VM: %s", err)
+		}
+	}
+
+	return d.Start()
+}
+
+func (d *Driver) Kill() error {
+	ctx, cancel := context.WithCancel(context.Background())
+	defer cancel()
+
+	c, err := d.vsphereLogin(ctx)
+	if err != nil {
+		return err
+	}
+	defer c.Logout(ctx)
+
+	vm, err := d.fetchVM(ctx, c, d.Folder, d.MachineName)
+	if err != nil {
+		return err
+	}
+
+	task, err := vm.PowerOff(ctx)
+	if err != nil {
+		return err
+	}
+
+	_, err = task.WaitForResult(ctx, nil)
+	if err != nil {
+		return err
+	}
+
+	d.IPAddress = ""
+
+	return nil
+}
+
+func (d *Driver) Remove() error {
+	machineState, err := d.GetState()
+	if err != nil {
+		return err
+	}
+	if machineState == state.Running {
+		if err = d.Kill(); err != nil {
+			return fmt.Errorf("can't stop VM: %s", err)
+		}
+	}
+	ctx, cancel := context.WithCancel(context.Background())
+	defer cancel()
+
+	c, err := d.vsphereLogin(ctx)
+	if err != nil {
+		return err
+	}
+	defer c.Logout(ctx)
+
+	vm, err := d.fetchVM(ctx, c, d.Folder, d.MachineName)
+	if err != nil {
+		return err
+	}
+
+	task, err := vm.Destroy(ctx)
+	if err != nil {
+		return err
+	}
+
+	_, err = task.WaitForResult(ctx, nil)
+	if err != nil {
+		return err
+	}
+	return nil
+}
+
+func (d *Driver) Upgrade() error {
+	return fmt.Errorf("upgrade is not supported for vsphere driver at this moment")
+}
+
+func (d *Driver) publicSSHKeyPath() string {
+	return d.GetSSHKeyPath() + ".pub"
+}
+
+func (d *Driver) vsphereLogin(ctx context.Context) (*govmomi.Client, error) {
+
+	// Parse URL from string
+	u, err := url.Parse(fmt.Sprintf("https://%s:%d/sdk", d.IP, d.Port))
+	if err != nil {
+		return nil, err
+	}
+	// set username and password for the URL
+	u.User = url.UserPassword(d.Username, d.Password)
+
+	// Connect and log in to ESX or vCenter
+	c, err := govmomi.NewClient(ctx, u, true)
+	if err != nil {
+		return nil, err
+	}
+
+	return c, nil
+}
+
+func (d *Driver) fetchVM(ctx context.Context, c *govmomi.Client, folder string, vmname string) (*object.VirtualMachine, error) {
+
+	// Create a new finder
+	f := find.NewFinder(c.Client, true)
+
+	var vm *object.VirtualMachine
+	var err error
+
+	dc, err := f.DatacenterOrDefault(ctx, d.Datacenter)
+	if err != nil {
+		return vm, err
+	}
+
+	f.SetDatacenter(dc)
+
+	vmPath := vmname
+	if folder != "" {
+		vmPath = fmt.Sprintf("%s/%s", d.Folder, vmname)
+	}
+	vm, err = f.VirtualMachine(ctx, vmPath)
+	if err != nil {
+		return vm, err
+	}
+	return vm, nil
+}
