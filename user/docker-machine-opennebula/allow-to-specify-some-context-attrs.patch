Allow to specify context attributes FILES_DS, INIT_SCRIPTS and START_SCRIPT_BASE64.

--- a/opennebula.go
+++ b/opennebula.go
@@ -44,6 +44,9 @@
 	DisableVNC     bool
 	StartRetries   string
 	MachineId      int
+	FilesDs        string
+	InitScripts    string
+	StartScriptB64 string
 }

 const (
@@ -53,7 +56,7 @@
 	defaultMemory       = "1024"
 	defaultStartRetries = "600"
 	// This is the contextualization script that will be executed by OpenNebula
-	contextScript = `#!/bin/sh
+	defaultStartScript  = `#!/bin/sh

 if [ -f /etc/boot2docker ]; then
 	USERNAME=docker
@@ -235,6 +238,24 @@
 			EnvVar: "ONE_START_RETRIES",
 			Value:  defaultStartRetries,
 		},
+		mcnflag.StringFlag{
+			Name:	"opennebula-files-ds",
+			Usage:	"Files that will be included in the contextualization image",
+			EnvVar:	"ONE_FILES_DS",
+			Value:	"",
+		},
+		mcnflag.StringFlag{
+			Name:	"opennebula-init-scripts",
+			Usage:	"Space-separated names of scripts to run after VM start",
+			EnvVar:	"ONE_INIT_SCRIPTS",
+			Value:	"",
+		},
+		mcnflag.StringFlag{
+			Name:	"opennebula-start-script-base64",
+			Usage:	"Text of the script executed when the machine starts up encoded in Base64 (overrides the default script)",
+			EnvVar:	"ONE_START_SCRIPT_BASE64",
+			Value:	"",
+		},
 	}
 }

@@ -278,6 +299,11 @@
 	// CONFIG
 	d.StartRetries = flags.String("opennebula-start-retries")

+	// Context
+	d.FilesDs = flags.String("opennebula-files-ds")
+	d.InitScripts = flags.String("opennebula-init-scripts")
+	d.StartScriptB64 = flags.String("opennebula-start-script-base64")
+
 	// Either TemplateName or TemplateID
 	if d.TemplateName != "" && d.TemplateID != "" {
 		return errors.New("specify only one of: --opennebula-template-name or --opennebula-template-id, not both")
@@ -458,8 +484,21 @@
 	template.AddCtx(keys.SSHPubKey, "$USER[SSH_PUBLIC_KEY]")
 	template.AddCtx("DOCKER_SSH_USER", d.SSHUser)
 	template.AddCtx("DOCKER_SSH_PUBLIC_KEY", string(pubKey))
-	template.AddB64Ctx(keys.StartScriptB64, contextScript)

+	if d.StartScriptB64 != "" {
+		template.AddCtx("START_SCRIPT_BASE64", d.StartScriptB64)
+	} else {
+		template.AddB64Ctx(keys.StartScriptB64, defaultStartScript)
+	}
+
+	if d.FilesDs != "" {
+		template.AddCtx("FILES_DS", d.FilesDs)
+	}
+
+	if d.InitScripts != "" {
+		template.AddCtx("INIT_SCRIPTS", d.InitScripts)
+	}
+
 	// Instantiate
 	log.Infof("Starting	 VM...")

